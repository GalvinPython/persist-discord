name: Create Release

on:
  push:
    branches:
      - main

jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version_compare.outputs.version_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get the current version from package.json
        id: current_version
        run: |
          echo "CURRENT_VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV

      - name: Get the latest release version
        id: latest_release
        run: |
          LATEST_VERSION=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Compare versions
        id: version_compare
        run: |
          if [ "v${{ env.CURRENT_VERSION }}" == "${{ env.LATEST_VERSION }}" ]; then
            echo "No version change detected."
            echo "::set-output name=version_changed::false"
          else
            echo "Version change detected."
            echo "::set-output name=version_changed::true"
          fi
        env:
          CURRENT_VERSION: ${{ env.CURRENT_VERSION }}
          LATEST_VERSION: ${{ env.LATEST_VERSION }}

  create_release:
    runs-on: ubuntu-latest
    needs: check_version
    if: ${{ needs.check_version.outputs.version_changed == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get the new version from package.json
        run: |
          NEW_VERSION=$(jq -r '.version' package.json)
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ env.NEW_VERSION }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          draft: false
          prerelease: false